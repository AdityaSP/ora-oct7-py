Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> a = 10
>>> type(a)
<class 'int'>
>>> b = 20
>>> a + b
30
>>> " hello" + "world"
' helloworld'
>>> 
>>> class Car():
	pass

>>> a = int()
>>> a
0
>>> city = Car()
>>> type(city)
<class '__main__.Car'>
>>> s = "hello"
>>> dir(s)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> l = [1,2,3]
>>> dir(l)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> dir(city)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']
>>> city.brand = 'Honda'
>>> city.name = 'City'
>>> fir(city)
Traceback (most recent call last):
  File "<pyshell#20>", line 1, in <module>
    fir(city)
NameError: name 'fir' is not defined
>>> dir(city)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'brand', 'name']
>>> city.brand
'Honda'
>>> city.name
'City'
>>> cor = Car()
>>> dir(cor)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']
>>> cor.brand = 'Toyota'
>>> cor.name = 'Corolla'
>>> city.brand, city.name
('Honda', 'City')
>>> cor.brand, cor.name
('Toyota', 'Corolla')
>>> 
>>> 
>>> 
>>> 
>>> 
>>> class Car():
	def __init__(self):
		print("In here")

		
>>> city = Car()
In here
>>> class Car():
	def __init__(self):
		print("In here")
		print(id(self))

		
>>> city = Car()
In here
2004054651208
>>> id(city)
2004054651208
>>> class Car():
	def __init__(self):
		print("In here")
		print(id(self))
		self.brand = 'Honda'
		self.name = 'City'

		
>>> city = Car()
In here
2004054746696
>>> id(city)
2004054746696
>>> dir(city)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'brand', 'name']
>>> city.brand
'Honda'
>>> city.name
'City'
>>> cor = Car()
In here
2004054653704
>>> cor.brand, cor.name
('Honda', 'City')
>>> class Car():
	def __init__(self, b, n):
		self.brand = b
		self.name = n

		
>>> city = Car()
Traceback (most recent call last):
  File "<pyshell#59>", line 1, in <module>
    city = Car()
TypeError: __init__() missing 2 required positional arguments: 'b' and 'n'
>>> city = Car('Honda', 'City')
>>> city.brand, city.name
('Honda', 'City')
>>> cor = Car('Toyota', 'Corolla')
>>> cor.brand, cor.name
('Toyota', 'Corolla')
>>> city.color ='silver grey'
>>> dir(city)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'brand', 'color', 'name']
>>> dir(cor)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'brand', 'name']
>>> class Car():
	def __init__(self, b, n):
		self.brand = b
		self.name = n
	def drive(self):
		print("I drive", self.brand , self.name)

		
>>> cor = Car('Toyota', 'Corolla')
>>> cor.brand, cor.name
('Toyota', 'Corolla')
>>> cor.drive()
I drive Toyota Corolla
>>> city = Car("Honda", "City")
>>> city.drive()
I drive Honda City
>>> li = [1,2,3]
>>> class Car():
	def __init__(self, b, n):
		self.brand = b
		self.name = n
	def drive(self):
		print("I drive", self.brand , self.name)
	def deployairbag(self):
		print("Time to go off")

		
>>> cor = Car('Toyota', 'Corolla')
>>> cor.drive()
I drive Toyota Corolla
>>> cor.deployairbag()
Time to go off
>>> class Car():
	def __init__(self, b, n):
		self.brand = b
		self.name = n
	def drive(self):
		print("I drive", self.brand , self.name)
	def deployairbag(self):
		print("Time to go off")
	def getEngine(self):
		return 1.1

	
>>> cor = Car('Toyota', 'Corolla')
>>> cor.getEngine()
1.1
>>> 
class Car():
	def __init__(self, b, n):
		self.brand = b
		self.name = n
	def drive(self):
		print("I drive", self.brand , self.name)
	def deployairbag(self):
		print("Time to go off")
	def getEngine(self):
		return 1.1
	def enhance(self):
		self.tyres = 'radial'

		
>>> cor = Car('Toyota', 'Corolla')
>>> 
>>> cor.brand, cor.name
('Toyota', 'Corolla')
>>> cor.enhance()
>>> cor.tyres
'radial'
>>> 
>>> 
>>> 
>>> 
>>> class LB():
	def breathe(self):
		print("I breathe")

		
>>> class HB():
	def breathe(self):
		print("I breathe")

		
>>> # is-a relationship
>>> # is LB a HB -> NO
>>> # is HB a LB -> YES
>>> 
>>> 
>>> class LB():
	def breathe(self):
		print("I breathe")

		
>>> class HB(LB):
	pass

>>> obj = HB()
>>> obj.breathe()
I breathe
>>> 
>>> 
>>> class HB(LB):
	def metathink(self):
		print("I think therefore I am ")

		
>>> obj = HB()
>>> obj.breathe()
I breathe
>>> obj.metathink()
I think therefore I am 
>>> 
>>> 
>>> class Fish(LB):
	def breathe(self):
		print("Through gills")

		
>>> obj = HB()
>>> obj.breathe()
I breathe
>>> obj = Fish()
>>> obj.breathe()
Through gills
>>> class Fish(LB):
	def breathe(self):
		LB.breathe(self)
		print("Through gills")

		
>>> obj = Fish()
>>> obj.breathe()
I breathe
Through gills
>>> 
class Car():
	def __init__(self, b, n):
		self.brand = b
		self.name = n
	def drive(self):
		print("I drive", self.brand , self.name)
	def deployairbag(self):
		print("Time to go off")
	def getEngine(self):
		return 1.1
	def enhance(self):
		self.tyres = 'radial'

		
>>> cor = Car('Toyota', 'Corolla')
>>> cor.drive()
I drive Toyota Corolla
>>> Car.drive(cor)
I drive Toyota Corolla
>>> li
[1, 2, 3]
>>> li[6]
Traceback (most recent call last):
  File "<pyshell#153>", line 1, in <module>
    li[6]
IndexError: list index out of range
>>> 
>>> hb = HB()
>>> f = Fish()
>>> isinstance(hb, Fish)
False
>>> isinstance(hb, HB)
True
>>> isinstance(hb, LB)
True
>>> err = IndexError()
>>> isinstance(err, IndexError)
True
>>> err = ValueError()
>>> isinstance(err, IndexError)
False
>>> isinstance(err, ZeroDivisionError)
False
>>> isinstance(err, Exception)
True
>>> issubclass(Exception, IndexError)
False
>>> issubclass(IndexError, Exception)
True
>>> issubclass(ValueError, Exception)
True
>>> li[10]
Traceback (most recent call last):
  File "<pyshell#169>", line 1, in <module>
    li[10]
IndexError: list index out of range
>>> err = ValueError()
>>> raise err
Traceback (most recent call last):
  File "<pyshell#171>", line 1, in <module>
    raise err
ValueError
>>> err = ValueError("Insufficient funds")
>>> raise err
Traceback (most recent call last):
  File "<pyshell#173>", line 1, in <module>
    raise err
ValueError: Insufficient funds
>>> raise ValueError("Insufficient funds")
Traceback (most recent call last):
  File "<pyshell#174>", line 1, in <module>
    raise ValueError("Insufficient funds")
ValueError: Insufficient funds
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> class Square():
	def __init__(self, l)
	
SyntaxError: invalid syntax
>>> class Square():
	def __init__(self, l):
		self.l = l
		self.area = l * l

		
>>> sq = Square(5)
>>> sq.l
5
>>> sq.area
25
>>> sq.area = 400
>>> sq.l
5
>>> sq.area
400
>>> class Square():
	def __init__(self, l):
		self.l = l
		self.__area = l * l

		
>>> sq = Square(5)
>>> sq.l
5
>>> sq.area
Traceback (most recent call last):
  File "<pyshell#199>", line 1, in <module>
    sq.area
AttributeError: 'Square' object has no attribute 'area'
>>> sq.__area
Traceback (most recent call last):
  File "<pyshell#200>", line 1, in <module>
    sq.__area
AttributeError: 'Square' object has no attribute '__area'
>>> # __area is hidden from outside of the class
>>> 
>>> class Square():
	def __init__(self, l):
		self.l = l
		self.__area = l * l
	def get_area(self):
		return self.__area

	
>>> sq = Square(5)
>>> sq.l
5
>>> sq.get_area()
25
>>> sq.__area
Traceback (most recent call last):
  File "<pyshell#210>", line 1, in <module>
    sq.__area
AttributeError: 'Square' object has no attribute '__area'
>>> class Square():
	def __init__(self, l):
		self.l = l
		self.__area = l * l
	def get_area(self):
		return self.__area
	def set_area(self,a):
		raise ValueError("Cannot directly set area")

	
>>> sq = Square(5)
>>> sq.l
5
>>> sq.get_area()
25
>>> sq.set_area(400)
Traceback (most recent call last):
  File "<pyshell#218>", line 1, in <module>
    sq.set_area(400)
  File "<pyshell#214>", line 8, in set_area
    raise ValueError("Cannot directly set area")
ValueError: Cannot directly set area
>>> class Square():
	def __init__(self, l):
		self.l = l
		self.__area = l * l
	def get_area(self):
		return self.__area
	def set_area(self,a):
		raise ValueError("Cannot directly set area")
	area = property(fget=get_area, fset=set_area)

	
>>> sq = Square(5)
>>> sq.l
5
>>> sq.__area
Traceback (most recent call last):
  File "<pyshell#224>", line 1, in <module>
    sq.__area
AttributeError: 'Square' object has no attribute '__area'
>>> sq.area
25
>>> sq.area = 500
Traceback (most recent call last):
  File "<pyshell#226>", line 1, in <module>
    sq.area = 500
  File "<pyshell#221>", line 8, in set_area
    raise ValueError("Cannot directly set area")
ValueError: Cannot directly set area
>>> sq.l = 10
>>> sq.area
25
>>> class Square():
	def __init__(self, l):
		self.__l = l
		self.__area = l * l
	def get_area(self):
		return self.__area
	def set_area(self,a):
		raise ValueError("Cannot directly set area")
	def get_l(self):
		return self.__l
	def set_l(self, l):
		self.__l = l
		self.__area = l * l
	area = property(fget=get_area, fset=set_area)
	l = propert(fget=get_l, fset=set_l)

	
Traceback (most recent call last):
  File "<pyshell#231>", line 1, in <module>
    class Square():
  File "<pyshell#231>", line 15, in Square
    l = propert(fget=get_l, fset=set_l)
NameError: name 'propert' is not defined
>>> class Square():
	def __init__(self, l):
		self.__l = l
		self.__area = l * l
	def get_area(self):
		return self.__area
	def set_area(self,a):
		raise ValueError("Cannot directly set area")
	def get_l(self):
		return self.__l
	def set_l(self, l):
		self.__l = l
		self.__area = l * l
	area = property(fget=get_area, fset=set_area)
	l = property(fget=get_l, fset=set_l)

	
>>> sq = Square(5)
>>> sq.l
5
>>> sq.area
25
>>> sq.area = 400
Traceback (most recent call last):
  File "<pyshell#237>", line 1, in <module>
    sq.area = 400
  File "<pyshell#233>", line 8, in set_area
    raise ValueError("Cannot directly set area")
ValueError: Cannot directly set area
>>> sq.l = 10
>>> sq.area
100
>>> sq.l = 12
>>> sq.area
144
>>> 
