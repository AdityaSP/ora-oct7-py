Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> def sayhi():
	print("Hi")

	
>>> sayhi()
Hi
>>> x = sayhi()
Hi
>>> x
>>> x = len("hello")
>>> x
5
>>> def sayhi():
	print("Hi")
	return "Hi"

>>> x = sayhi()
Hi
>>> x
'Hi'
>>> def sayhi():
	print("Hi")
	return "Hello"

>>> sayhi()
Hi
'Hello'
>>> x = sayhi()
Hi
>>> x
'Hello'
>>> def sayhi():
	return "Hello"

>>> x= sayhi()
>>> x
'Hello'
>>> #pure functions
>>> # unit tested
>>> def sayhi(name):
	return "Hello" + name

>>> x = sayhi('Aditya')
>>> x
'HelloAditya'
>>> # function maps an input value to an output value and nothing else
>>> s = 'hello;
SyntaxError: EOL while scanning string literal
>>> s = 'hello'
>>> s.upper()
'HELLO'
>>> x = s.upper()
>>> x
'HELLO'
>>> s
'hello'
>>> li = [1,2,3]
>>> li.append(4)
>>> li
[1, 2, 3, 4]
>>> x = li.append(4)
>>> x
>>> li
[1, 2, 3, 4, 4]
>>> li
[1, 2, 3, 4, 4]
>>> x = li.pop()
>>> li
[1, 2, 3, 4]
>>> x
4
>>> s
'hello'
>>> s.upper().split().append(4).pop()

Traceback (most recent call last):
  File "<pyshell#47>", line 1, in <module>
    s.upper().split().append(4).pop()
AttributeError: 'NoneType' object has no attribute 'pop'
>>> x = s.upper().split()
>>> x.append(4)
>>> x
['HELLO', 4]
>>> x.pop()
4
>>> 
>>> 
>>> 
>>> def sayhi(name):
	return "Hello" + name

>>> def full_name(fn, ln):
	return fn.capitalize() + " " + ln.capitalize()

>>> full_name('John','Doe')
'John Doe'
>>> full_name('john','doe')
'John Doe'
>>> full_name('Doe', 'john')
'Doe John'
>>> # positional arguements (above style of calling)
>>> 
>>> # key word arguments
>>> 
>>> full_name(fn ='John', ln='Doe')
'John Doe'
>>> full_name(ln='Doe', fn ='John')
'John Doe'
>>> 
>>> 
>>> def full_name(fn, ln, title):
	return title.upper() + "." + fn.capitalize() + " " + ln.capitalize()

>>> full_name(ln='Doe', fn ='John')
Traceback (most recent call last):
  File "<pyshell#73>", line 1, in <module>
    full_name(ln='Doe', fn ='John')
TypeError: full_name() missing 1 required positional argument: 'title'
>>> def full_name(fn, ln, title='mr'):
	return title.upper() + "." + fn.capitalize() + " " + ln.capitalize()

>>> full_name(ln='Doe', fn ='John')
'MR.John Doe'
>>> full_name(ln='Doe', fn ='John', title='Dr')
'DR.John Doe'
>>> # No function overloading
>>> li = [45,123,67,34,78]
>>> sorted(li)
[34, 45, 67, 78, 123]
>>> li
[45, 123, 67, 34, 78]
>>> sorted(li, reverse=True)
[123, 78, 67, 45, 34]
>>> '''#functions -> pure functions
len
id
type
int
str
input
# methods
s = "hello"
s.upper()  --> pure method
s.lower() --> pure method
s.split() --> pure method

b = [3,4,5]
li = [1,2,3]
li.append(4)  --> pure side effect
li.extend()  --> pure side effect
li.insert()  --> pure side effect

# below would result in an error

s.upper().split().append(4).pop()
s1 = s.upper()
s2 = s1.split()
s3 = s2.append(4)
s3.pop()
'''
'#functions -> pure functions\nlen\nid\ntype\nint\nstr\ninput\n# methods\ns = "hello"\ns.upper()  --> pure method\ns.lower() --> pure method\ns.split() --> pure method\n\nb = [3,4,5]\nli = [1,2,3]\nli.append(4)  --> pure side effect\nli.extend()  --> pure side effect\nli.insert()  --> pure side effect\n\n# below would result in an error\n\ns.upper().split().append(4).pop()\ns1 = s.upper()\ns2 = s1.split()\ns3 = s2.append(4)\ns3.pop()\n'
>>> 
