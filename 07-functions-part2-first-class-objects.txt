Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> # functions as first class objects/constructs
>>> # functional style of programming
>>> a = 10
>>> def sayhi():
	return "Hi"

>>> id(a)
140704057422368
>>> id(sayhi)
2118080439640
>>> type(a)
<class 'int'>
>>> type(sayhi)
<class 'function'>
>>> b = a
>>> id(b)
140704057422368
>>> b
10
>>> greet = sayhi
>>> id(greet)
2118080439640
>>> type(greet)
<class 'function'>
>>> sayhi()
'Hi'
>>> greet()
'Hi'
>>> 
>>> 
>>> 
>>> def execother(obj):
	print(type(obj))

	
>>> execother(a)
<class 'int'>
>>> execother(sayhi)
<class 'function'>
>>> execother(sayhi())
<class 'str'>
>>> 
>>> 
>>> def execother(obj):
	print("Greetings->", obj())

	
>>> execother(sayhi)
Greetings-> Hi
>>> # execother(sayhi) ---> passing a function "sayhi" to another function "execother"
>>> # sayhi -> first order function -> takes in regular args and gives back reg objs
>>> 
>>> # execother -->  higher order function --> either / both takes in a function or returns a function
>>> 
>>> # using higer order functions it is possible to inject behaviour
>>> 
>>> 
>>> 
>>> def calc(f, x, y):
	return f(x,y)

>>> 
>>> # is calc a higher order function? --> yes
>>> def add(m,n):
	return m +n

>>> 
>>> calc(add, 5,6)
11
>>> def sumofsq(m,n):
	return m**2 + n**2

>>> calc(sumofsq, 5,6)
61
>>> 
def sumofsq(m,n):
	return m**2 + n**2.

>>> calc(sumofsq, 5,6)
61.0
>>> 
>>> 
>>> 
>>> 
>>> li = ['new york', 'New Jersey','boston', 'Florida']
>>> sorted(li)
['Florida', 'New Jersey', 'boston', 'new york']
>>> def toupper(x):
	return x.upper()

>>> sorted(li, key=toupper)
['boston', 'Florida', 'New Jersey', 'new york']
>>> sorted(li, key=toupper, reverse=True)
['new york', 'New Jersey', 'Florida', 'boston']
>>> li = ['ww','ggg','bbbb','z']
>>> sorted(li)
['bbbb', 'ggg', 'ww', 'z']
>>> def get_len(x):
	return len(x)

>>> sorted(li, key=get_len)
['z', 'ww', 'ggg', 'bbbb']
>>> sorted(li, key=len)
['z', 'ww', 'ggg', 'bbbb']
>>> 
>>> 
>>> 
>>> 10
10
>>> "Hello"
'Hello'
>>> # literal -> 10 is an int literal, "Hello" is a string literal"
>>> def add(m,n):
	return m +n

>>> lambda m,n : m + n
<function <lambda> at 0x000001ED2771D708>
>>> x = lambda m,n : m + n
>>> type(x)
<class 'function'>
>>> x(4,5)
9
>>> x = 50
>>> y = 60
>>> add(x,y)
110
>>> add(50,60)
110
>>> li = ['new york', 'New Jersey','boston', 'Florida']
>>> sorted(li, key=lambda x:x.upper())
['boston', 'Florida', 'New Jersey', 'new york']
>>> calc(sumofsq, 5,6)
61.0
>>> calc(lambda x,y: x-y , 5,6)
-1
>>> calc(lambda x,y: x*y , 5,6)
30
>>> li = ['Bill Gates', 'Steve Jobs', 'Roger Federer']
>>> 
>>> 
>>> sorted(li, key=lambda x : x.split()[-1])
['Roger Federer', 'Bill Gates', 'Steve Jobs']
>>> 'Roger Federer'.split()
['Roger', 'Federer']
>>> 'Roger Federer'.split()[-1]
'Federer'
>>> fn = ['Bill', 'Steve', 'Roger']
>>> ln = ['Gates', 'Jobs', 'Federer']
>>> 
>>> 
>>> sorted(zip(fn,ln), key=lambda x : x.split()[-1])
Traceback (most recent call last):
  File "<pyshell#107>", line 1, in <module>
    sorted(zip(fn,ln), key=lambda x : x.split()[-1])
  File "<pyshell#107>", line 1, in <lambda>
    sorted(zip(fn,ln), key=lambda x : x.split()[-1])
AttributeError: 'tuple' object has no attribute 'split'
>>> sorted(zip(fn,ln), key=lambda x : x[-1])
[('Roger', 'Federer'), ('Bill', 'Gates'), ('Steve', 'Jobs')]
>>> 
