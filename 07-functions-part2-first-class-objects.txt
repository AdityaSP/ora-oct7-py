Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> # functions as first class objects/constructs
>>> # functional style of programming
>>> a = 10
>>> def sayhi():
	return "Hi"

>>> id(a)
140704057422368
>>> id(sayhi)
2118080439640
>>> type(a)
<class 'int'>
>>> type(sayhi)
<class 'function'>
>>> b = a
>>> id(b)
140704057422368
>>> b
10
>>> greet = sayhi
>>> id(greet)
2118080439640
>>> type(greet)
<class 'function'>
>>> sayhi()
'Hi'
>>> greet()
'Hi'
>>> 
>>> 
>>> 
>>> def execother(obj):
	print(type(obj))

	
>>> execother(a)
<class 'int'>
>>> execother(sayhi)
<class 'function'>
>>> execother(sayhi())
<class 'str'>
>>> 
>>> 
>>> def execother(obj):
	print("Greetings->", obj())

	
>>> execother(sayhi)
Greetings-> Hi
>>> # execother(sayhi) ---> passing a function "sayhi" to another function "execother"
>>> # sayhi -> first order function -> takes in regular args and gives back reg objs
>>> 
>>> # execother -->  higher order function --> either / both takes in a function or returns a function
>>> 
>>> # using higer order functions it is possible to inject behaviour
>>> 
>>> 
>>> 
>>> def calc(f, x, y):
	return f(x,y)

>>> 
>>> # is calc a higher order function? --> yes
>>> def add(m,n):
	return m +n

>>> 
>>> calc(add, 5,6)
11
>>> def sumofsq(m,n):
	return m**2 + n**2

>>> calc(sumofsq, 5,6)
61
>>> 
def sumofsq(m,n):
	return m**2 + n**2.

>>> calc(sumofsq, 5,6)
61.0
>>> 
>>> 
>>> 
>>> 
>>> li = ['new york', 'New Jersey','boston', 'Florida']
>>> sorted(li)
['Florida', 'New Jersey', 'boston', 'new york']
>>> def toupper(x):
	return x.upper()

>>> sorted(li, key=toupper)
['boston', 'Florida', 'New Jersey', 'new york']
>>> sorted(li, key=toupper, reverse=True)
['new york', 'New Jersey', 'Florida', 'boston']
>>> li = ['ww','ggg','bbbb','z']
>>> sorted(li)
['bbbb', 'ggg', 'ww', 'z']
>>> def get_len(x):
	return len(x)

>>> sorted(li, key=get_len)
['z', 'ww', 'ggg', 'bbbb']
>>> sorted(li, key=len)
['z', 'ww', 'ggg', 'bbbb']
>>> 
>>> 
>>> 
>>> 10
10
>>> "Hello"
'Hello'
>>> # literal -> 10 is an int literal, "Hello" is a string literal"
>>> def add(m,n):
	return m +n

>>> lambda m,n : m + n
<function <lambda> at 0x000001ED2771D708>
>>> x = lambda m,n : m + n
>>> type(x)
<class 'function'>
>>> x(4,5)
9
>>> x = 50
>>> y = 60
>>> add(x,y)
110
>>> add(50,60)
110
>>> li = ['new york', 'New Jersey','boston', 'Florida']
>>> sorted(li, key=lambda x:x.upper())
['boston', 'Florida', 'New Jersey', 'new york']
>>> calc(sumofsq, 5,6)
61.0
>>> calc(lambda x,y: x-y , 5,6)
-1
>>> calc(lambda x,y: x*y , 5,6)
30
>>> li = ['Bill Gates', 'Steve Jobs', 'Roger Federer']
>>> 
>>> 
>>> sorted(li, key=lambda x : x.split()[-1])
['Roger Federer', 'Bill Gates', 'Steve Jobs']
>>> 'Roger Federer'.split()
['Roger', 'Federer']
>>> 'Roger Federer'.split()[-1]
'Federer'
>>> fn = ['Bill', 'Steve', 'Roger']
>>> ln = ['Gates', 'Jobs', 'Federer']
>>> 
>>> 
>>> sorted(zip(fn,ln), key=lambda x : x.split()[-1])
Traceback (most recent call last):
  File "<pyshell#107>", line 1, in <module>
    sorted(zip(fn,ln), key=lambda x : x.split()[-1])
  File "<pyshell#107>", line 1, in <lambda>
    sorted(zip(fn,ln), key=lambda x : x.split()[-1])
AttributeError: 'tuple' object has no attribute 'split'
>>> sorted(zip(fn,ln), key=lambda x : x[-1])
[('Roger', 'Federer'), ('Bill', 'Gates'), ('Steve', 'Jobs')]
>>> li = [34,23,56,34,67]
>>> sum(li)
214
>>> max(li)
67
>>> min(li)
23
>>> li = [[12,34,56],[67,456,78], [56,32,56]]
>>> sorted(li)
[[12, 34, 56], [56, 32, 56], [67, 456, 78]]
>>> sorted(li, key=sum)
[[12, 34, 56], [56, 32, 56], [67, 456, 78]]
>>> sorted(li, key=max)
[[12, 34, 56], [56, 32, 56], [67, 456, 78]]
>>> sorted(li, key=min)
[[12, 34, 56], [56, 32, 56], [67, 456, 78]]
>>> 
>>> 
>>> 
>>> 
>>> kms = [5,10,21,42]
>>> def tomi(x):
	return x * 0.6

>>> mi = []
>>> for km in kms:
	mi.append(tomi(km))

	
>>> mi
[3.0, 6.0, 12.6, 25.2]
>>> map(tomi, kms)
<map object at 0x000001ED277245C8>
>>> m = map(tomi, kms)
>>> # m is the mapobject and it is an iterator
>>> 
>>> # iterators and sequences
>>> # we can loop through both iterators and sequences. in sequences the items are all realized but in an iterator the items are not yet realized
>>> for item in m:
	print(item)

	
3.0
6.0
12.6
25.2
>>> list(map(tomi, kms))
[3.0, 6.0, 12.6, 25.2]
>>> tuple(map(tomi, kms))
(3.0, 6.0, 12.6, 25.2)
>>> list(map(lambda x : x * 0.62, kms))
[3.1, 6.2, 13.02, 26.04]
>>> type(m)
<class 'map'>
>>> 
>>> 
>>> ages = [8,23,12,56,34,78]
>>> sel = []
>>> for age in ages:
	if 20 < age < 60:
		sel.append(age)

		
>>> sel
[23, 56, 34]
>>> filter(lambda x : 20 < x < 60, ages)
<filter object at 0x000001ED2771EEC8>
>>> list(filter(lambda x : 20 < x < 60, ages))
[23, 56, 34]
>>> 
>>> 
>>> 
>>> 

>>> 
>>> # comprehensions of Python
>>> kms = [5,10,21,42]
>>> mi = []
>>> for km in kms:
	mi.append(km * 0.62)

	
>>> #[ <expr> <for statement>]
>>> mi
[3.1, 6.2, 13.02, 26.04]
>>> mi = [ km * 0.62 for km in kms]
>>> mi
[3.1, 6.2, 13.02, 26.04]
>>> ages = [8,23,12,56,34,78]
>>> list(map(lambda x : x * 12, filter(lambda x : 20 < x < 60, ages)))
[276, 672, 408]
>>> #[ <expr> <for statement> <if gates>]
>>> 
>>> [ age * 12 for age in ages if 20 < age < 60]
[276, 672, 408]
>>> 
>>> 
>>> 
>>> s = 'chrome.exe                   28920 Console                    1    191,152 K'
>>> 
>>> 
>>> s.split()
['chrome.exe', '28920', 'Console', '1', '191,152', 'K']
>>> s.split(' ')
['chrome.exe', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '28920', 'Console', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '1', '', '', '', '191,152', 'K']
>>> s.split()[1]
'28920'
>>> 
>>> 
>>> def sayhi():
	def greet():
		return "Hi there!"
	return greet

>>> x = sayhi()
>>> x
<function sayhi.<locals>.greet at 0x000001ED27751048>
>>> type(x)
<class 'function'>
>>> x()
'Hi there!'
>>> def sayhi(name):
	def greet():
		return "Hi " + name
	return greet

>>> 
>>> x = sayhi("Bill")
>>> y = sayhi("Henry")
>>> # x and y are both functions
>>> x()
'Hi Bill'
>>> y()
'Hi Henry'
>>> # closures
>>> def bill(i1, i2, tax):
	total = i1 + i2
	grandtotal = total + total * tax
	return grandtotal

>>> 
>>> bill(100,200,.1)
330.0
>>> def bill(i1 ,i2):
	total = i1 + i2
	def withtax(tax):
		return total + total * tax
	return withtax

>>> x = bill(100,200)
>>> 
>>> x(.1)
330.0
>>> x(.2)
360.0
>>> # higher order function, closure, partial functions
>>> 
>>> bill(50,60)(.2)
132.0
>>> 
>>> 
>>> 
>>> 
>>> 
>>> def sayhi():
	print("Hi")

	
>>> sayhi()
Hi
>>> def deco(f):
	def wrapper():
		print("*" * 50)
		f()
		print("*" * 50)
	return wrapper

>>> x = deco(sayhi)
>>> x()
**************************************************
Hi
**************************************************
>>> deco(sayhi)()
**************************************************
Hi
**************************************************
>>> @deco
def sayhi():
	print("Hi")

	
>>> sayhi()
**************************************************
Hi
**************************************************
>>> 
>>> 
>>> 
>>> 
>>> import random
>>> import time
>>> time.time()
1570574292.4327333
>>> time.time()
1570574316.2339914
>>> 
>>> 
>>> def heavyduty():
	time.sleep(random.randint(1,4))

	
>>> heavyduty()
>>> heavyduty()
>>> def timer(f):
	def wrapper():
		s = time.time()
		f()
		e = time.time()
		print("Took:", e-s, "secs")
	return wrapper

>>> @timer
def heavyduty():
	time.sleep(random.randint(1,4))

	
>>> heavyduty()
Took: 1.0004210472106934 secs
>>> heavyduty()
Took: 3.000246524810791 secs
>>> heavyduty()
Took: 2.0007407665252686 secs
>>> #memoization
@timer
def heavyduty():
	time.sleep(random.randint(1,4))

	
>>> def heavyduty():
	time.sleep(random.randint(1,4))

	
>>> 
>>> heavyduty=timer(heavyduty)
>>> heavyduty()
Took: 4.000434398651123 secs
>>> s = "3,692"
>>> int(s)
Traceback (most recent call last):
  File "<pyshell#286>", line 1, in <module>
    int(s)
ValueError: invalid literal for int() with base 10: '3,692'
>>> s.replace(',','')
'3692'
>>> s = "100"
>>> s.replace(',','')
'100'
>>> s = "100,00,00"
>>> s.replace(',','')
'1000000'
>>> s = 'cmd.exe                      29764 Console                    1      3,692 K'
>>> line = s
>>> 
>>> int(line.split()[-2].replace(',',''))
3692
>>> li = [34,56,43,67]
>>> sorted(li)
[34, 43, 56, 67]
>>> li
[34, 56, 43, 67]
>>> li
[34, 56, 43, 67]
>>> x = sorted(li)
>>> li
[34, 56, 43, 67]
>>> li.sort()
>>> li
[34, 43, 56, 67]
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> # list comprehension
>>> # dictionary comprehension
>>> 
>>> 
>>> # create a diction of x: x**2
>>> # of 50 numbers
>>> 
>>> range(3)
range(0, 3)
>>> for i in range(3):
	print(i)

	
0
1
2
>>> d = {}
>>> for i in range(50):
	d[i] = i ** 2

	
>>> d
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225, 16: 256, 17: 289, 18: 324, 19: 361, 20: 400, 21: 441, 22: 484, 23: 529, 24: 576, 25: 625, 26: 676, 27: 729, 28: 784, 29: 841, 30: 900, 31: 961, 32: 1024, 33: 1089, 34: 1156, 35: 1225, 36: 1296, 37: 1369, 38: 1444, 39: 1521, 40: 1600, 41: 1681, 42: 1764, 43: 1849, 44: 1936, 45: 2025, 46: 2116, 47: 2209, 48: 2304, 49: 2401}
>>> # {<keyexpr>:<valueexpr> <for statement>}
>>> d = { i:i**2 for i in range(50)}
>>> d
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225, 16: 256, 17: 289, 18: 324, 19: 361, 20: 400, 21: 441, 22: 484, 23: 529, 24: 576, 25: 625, 26: 676, 27: 729, 28: 784, 29: 841, 30: 900, 31: 961, 32: 1024, 33: 1089, 34: 1156, 35: 1225, 36: 1296, 37: 1369, 38: 1444, 39: 1521, 40: 1600, 41: 1681, 42: 1764, 43: 1849, 44: 1936, 45: 2025, 46: 2116, 47: 2209, 48: 2304, 49: 2401}
>>> d = { i:i**2 for i in range(50) if i % 2 ==0}
>>> d
{0: 0, 2: 4, 4: 16, 6: 36, 8: 64, 10: 100, 12: 144, 14: 196, 16: 256, 18: 324, 20: 400, 22: 484, 24: 576, 26: 676, 28: 784, 30: 900, 32: 1024, 34: 1156, 36: 1296, 38: 1444, 40: 1600, 42: 1764, 44: 1936, 46: 2116, 48: 2304}
>>> 
>>> 
>>> s = 'a quick brown fox jumps over the lazy dog'
>>> d = { c: s.count(c) for c in s}
>>> d
{'a': 2, ' ': 8, 'q': 1, 'u': 2, 'i': 1, 'c': 1, 'k': 1, 'b': 1, 'r': 2, 'o': 4, 'w': 1, 'n': 1, 'f': 1, 'x': 1, 'j': 1, 'm': 1, 'p': 1, 's': 1, 'v': 1, 'e': 2, 't': 1, 'h': 1, 'l': 1, 'z': 1, 'y': 1, 'd': 1, 'g': 1}
>>> len(d)
27
>>> 
